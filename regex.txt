正则表达式（RE）

动机
1. 文本处理已经成为计算机常见的工作之一
2. 对文本内容的搜索，定位，提取是逻辑比较复杂的工作
3. 为了快速方便的解决上述问题，产生了正则表达式技术

定义： 即文本的高级匹配模式，提供搜索，替换等功能。
      其本质是由一系列字符和特殊符号构成的字符串，这个字符串即正则表达式。

目标：

1. 熟练掌握正则表达式符号
2. 直到什么是正则表达式，如何应用
3. 能够读懂正则表达式，编写简单的正则匹配
4. 会使用re模块操作正则表达式

正则表达式特点：

1. 方便文本处理
2. 支持语言众多
3. 使用灵活，变化多样


python --》 re模块

re.findall(pattern,string)
功能: 获取所有正则表达式匹配的内容
参数：pattern   正则表达式
      string    目标字符串
返回：列表，  得到所有复合条件的内容


元字符的使用

1. 普通字符

元字符： a  b C  张 
匹配规则： 每个字符匹配对应的字符

In [10]: re.findall('ab','abcdef')
Out[10]: ['ab']


2. 或

元字符： | 
匹配规则： 匹配 | 两侧任意一个正则表达式规则

In [13]: re.findall('ab|ef','abcdefhi')
Out[13]: ['ab', 'ef']

3. 匹配单个字符

元字符：  .
匹配规则： 匹配除\n外任意一个字符

In [16]: re.findall('f.o','foo,fao,f和o')
Out[16]: ['foo', 'fao', 'f和o']


4. 匹配字符串开始位置

元字符： ^
匹配规则： 匹配目标字符串的开头位置

In [20]: re.findall("^Hello","Hello Jame, Hello Kitty")
Out[20]: ['Hello']

5. 匹配字符串的结尾位置

元字符 ： $
匹配规则：匹配字符串结尾位置

In [23]: re.findall("Hello$","Hello,Jame, Hello")
Out[23]: ['Hello']


6.  匹配重复

元字符 ： *
匹配规则： 匹配前面的字符出现0次或者多次

In [29]: re.findall("fo*","fooabcd")
Out[29]: ['foo']

注意： fo*  匹配f为o出现0次，而fo表示出现1次

7. 匹配重复

元字符： +
匹配规则： 匹配前面的字符出现 1次或多次

In [33]: re.findall("fo+","fooooooabcdfo")
Out[33]: ['foooooo', 'fo']

8. 匹配重复

元字符： ？
匹配规则： 匹配前面出现的字符0次或1次

In [41]: re.findall("ab?","acdefabb")
Out[41]: ['a', 'ab']

9. 匹配重复

元字符： {n}
匹配规则： 匹配前面的字符出现指定次数

In [43]: re.findall("ab{3}","acdefabbb")
Out[43]: ['abbb']

10. 匹配重复

元字符： {m,n}
匹配规则： 匹配前面出现的字符m-n次

In [46]: re.findall("ab{3,5}","abcdefabbb,abbbbbb")
Out[46]: ['abbb', 'abbbbb']


11. 匹配字符集

元字符： [字符集]
匹配规则： 匹配字符集中任意一个字符

[abc123] --> 字符集中字符
[a-z]  [A-Z]  [0-9]  --> 取字符区间内所有值
[_#%123a-z]  可以混合使用

In [53]: re.findall("[A-Z]+[a-z]*","Hello Jame,Beijing CBD")
Out[53]: ['Hello', 'Jame', 'Beijing', 'CBD']

12. 匹配字符集

元字符：[^...]
匹配规则： 匹配除了字符集中的任意一个字符

In [55]: re.findall("[^, ]+","Hello Jame,This is a test_1")
Out[55]: ['Hello', 'Jame', 'This', 'is', 'a', 'test_1']


13.  匹配任意（非）数字字符

元字符 ： \d   \D
匹配规则： \d 匹配任意数字字符    [0-9]
           \D 匹配任意非数字字符  [^0-9]

In [56]: re.findall("1\d{10}","tel:15813670316")
Out[56]: ['15813670316']


14. 匹配任意（非）普通字符

元字符： \w   \W
匹配规则： \w  匹配任意普通字符  [_a-zA-Z0-9]
           \w  匹配任意非普通字符

注意： 普通字符指 数字 字母 下划线 和 普通utf8字符

In [59]: re.findall("\w+","PORT#1908 44% 下降")
Out[59]: ['PORT', '1908', '44', '下降']


15. 匹配任意（非）空字符

元字符： \s  \S
匹配规则： \s 匹配任意空字符  [ \r\n\t\v\f]
           \S 匹配任意非空字符

In [62]: re.findall("hello\s+world","hello    world")
Out[62]: ['hello    world']

16. 匹配字符串开头结尾位置

元字符 ： \A   \Z
匹配规则： \A 匹配字符串开头  ^
           \Z 匹配字符串结尾  $

In [68]: re.findall("\A\d+-\d+\Z","1000-1500")
Out[68]: ['1000-1500']

17. 匹配（非）单词边界

元字符： \b  \B
匹配规则： \b   匹配单词边界位置
           \B   匹配非单词边界位置

注意： 数字字母下划线，普通utf8字符和其他字符的交界位置为单词边界

元字符总结

匹配单个字符：.  [...]  [^...] \d  \D  \w  \W  \s  \S 

匹配重复： *  +  ?   {n}  {m,n}

匹配位置： ^  $   \A   \Z   \b  \B

其他： |  ()   \


正则表达式转义

    在正则表达式中如果想表达特殊符号本身则要用转义字符，即在特殊符号前加\表达其本身字符

    e.g.  正则表达式 "Mr\.Right"  让 . 没有元字符含义 

    特殊符号： . * + ? ^ $ [] () |  \

    目标字符串     正则表达式       python字符串
     "$10"           \$\d+            "\\$\\d+"
	
    raw字符串 --》 原始字符串
    特点：字符串内容为原样表达，不进行转义解析
          e.g.   r"\$\d+" ==> "\\$\\d+"

贪婪 和 非贪婪

贪婪模式：正则表达式中的重复匹配默认总是尽可能多的向后匹配更多的内容。

    涉及元字符： *   +    ？  {m,n}

非贪婪(懒惰)模式：尽可能少的重复匹配内容
 
    贪婪--》非贪婪： *？ +？ ??  {m,n}?

In [100]: re.findall(r"a.*?b","acb,alb,adeb")
Out[100]: ['acb', 'alb', 'adeb']


正则表达式分组

    使用()可以为正则表达式内部建立若干分组，子组为正则表达式的一部分。

    子组特点：
    1. 一个正则表达式内部可以有多个分组
    2. 分组后正则表达式仍然一个整体去匹配目标字符串，不会使用分组单独匹配
    3. 分组一般由外到内，由左到右计数，不会重叠
    
    子组的作用：
       
       1. 将分组作为一个整体，改变元字符的操作对象
          
          re.search(r"(ab)+\d+","ababab1234").group()
          Out[105]: 'ababab1234'


	  re.search(r"\w+@\w+\.(cn|com)","abc@123.com").group()
          Out[110]: 'abc@123.com'
       
       2. 可以通过函数单独提取子组的对应匹配内容

          re.search(r"(http|https|ftp|file)://\S+",
          "http://www.baidu.com").group(1)
          Out[112]: 'http'
       
       3. 可以通过命名注释子组含义，让结构分明
          
	  * 子组分为捕获组合非捕获组，捕获组即定义了名称的子组

	  格式： (?P<name>patter)

          re.search(r"(?P<piglet>ab)cde","abcdefght").group()
          Out[113]: 'abcde'


正则表达式设计原则 

1. 正确性，能够正确的匹配目标字符串
2. 排他性，除了要匹配的内容，尽可能不匹配到其他内容
3. 全面性，尽可能对目标字符串各种情况考虑全面不遗漏


re模块使用

regex = compile(patten,flags = 0)
功能： 生成正则表达式对象
参数： pattern  正则表达式
       flags  功能标志位，丰富正则表达式的匹配功能
返回值： 返回正则对象

re.findall(pattern,string,flags)
功能: 从目标字符串匹配所有正则内容
参数：pattern  正则
      string   目标字符串
      flags    功能标志
返回值： 返回匹配到的内容列表
         如果正则表达式有子组则只获取子组对应内容

regex.findall(string,pos,endpos)
功能: 从目标字符串匹配所有正则内容
参数：string  目标字符串
      pos  对目标字符串截取的起始位置，默认开头
      endpos 对目标字符串截取的结束位置，默认结尾
返回值： 返回匹配到的内容列表
         如果正则表达式有子组则只获取子组对应内容

re.split(pattern,string,flags)
功能： 使用正则表达式匹配内容切割字符串
参数： pattern  正则
       string   目标字符串
返回： 列表  切割后的内容

re.sub(pattern,replaceStr,string,max,flags)
功能: 使用字符串替换正则匹配内容
参数：pattern  正则
      replaceStr  替换的字符串
      string 目标字符串
      max  最多替换几处，默认全部替换
返回值 ： 返回替换后的字符串

subn() : 与sub相同，多返回一个替换个数


re.finditer(pattern,string,flags)
功能: 查找正则表达式匹配内容
参数：pattern 正则
      string 目标字符串
      flags
返回：迭代对象 


re.fullmatch(pattern,string,flags)
功能：完全匹配目标字符串
参数：pattern  正则
      string  目标字符串
      flags
返回： 返回匹配到的内容，失败返回None

re.match(pattern,string,flags)
功能：匹配目标字符串开始位置
参数：pattern  正则
      string  目标字符串
      flags
返回： 返回匹配到的内容，失败返回None


re.search(pattern,string,flags)
功能：匹配目标字符第一处匹配内容
参数：pattern  正则
      string  目标字符串
      flags
返回： 返回匹配到的内容，失败返回None


作业：1. 熟记正则表达式元字符
      2. 使用regex对象复习re模块调用的函数
      3. 找一个文档，使用正则表达式匹配：
         [1] 所有以大写字母开头的单词
	 [2] 所有的数字，包含整数，小数，负数，分数，百分数

******************************************************
复习

1. 什么是正则表达式
2. 元字符
3. 正则表达式转义  贪婪   分组
4. 正则表达式匹配原则
5. re模块使用
      re 模块调用
      compile对象调用
      match对象调用

******************************************************

regex对象属性

    pattern  ： 获取对应的正则表达式
    flags ：获取标志位值
    groupindex ： 获取捕获组组名和组序号的字典
    groups： 获取有多少子组


match对象属性和方法

属性变量
pos    目标字符串的开始位置
endpos 目标字符串的结束位置
re     正则表达式
string 目标字符串
lastgroup  最后一组名称
lastindex  最后一组是第几组


属性方法
span()   匹配内容的起止位置
start()  匹配内容的开始位置
end()    匹配内容的结束位置

group()
功能：获取match对象的对应内容
参数： 默认为0表示获取正则表达式整体匹配到的内容
       如果为序列号或者子组名称则表示获取对应子组的匹配内容
返回值： 返回相应的内容

groupdict()  获取捕获组字典
groups()  获取所有子组对应内容


flags参数使用
    
    * re调用函数最后一个参数通常为flags，用以丰富正则的匹配功能。

    I == IGNORECASE  匹配时忽略字母大小写
    A == ASCII   只能匹配ascii字符
    S == DOTALL  作用域元字符 . 使其可以匹配\n 
    M == MULTILINE 作用域^$使其可以匹配每行的开头结尾
    X == VERBOSE  可以给正则表达式每行加#注释

    同时使用多个flag
      
       flags = re.I | re.X











